# SurviveWorld Game

"SurviveWorld" is a two-player game where agents navigate a grid world to survive and earn rewards. The game takes place on a square grid, where each cell represents a location that agents and food can occupy.

The grid is populated by two agents, each represented by a colored square. A food item, represented by a circle, is placed on the grid. The agents can perform actions such as moving in different directions (up, down, left, right), eating the food, or passing.

When an agent performs the "Eat" action while positioned on the food item, it earns a reward. However, the agent can only eat the food if the food color matches its own color. On the other hand, the "Pass" action can only be performed by an agent on the food item, and it changes the food color while keeping the food in place. This action gives a chance to the other agent to reach and eat the food.

Agents have initial reward values, and their rewards are adjusted based on their actions. Rewards are deducted for movement actions, and agents earn a reward when successfully eating the food item.

The game continues until an agent's reward reaches 0 or below, at which point the game ends. The game also has a maximum step limit per episode.

The game provides a visual representation of the grid world, where agents are displayed as colored shapes and the food item is displayed as a shape of a different color. The rewards earned by each agent are shown on the screen.

By strategically navigating the grid, eating the food of the corresponding color, and maximizing rewards, players aim to stay alive by never reaching a negative reward.

## Game Rules

- **Grid World**: The game takes place on a square grid. Each cell of the grid represents a location that agents and food can occupy.
- **Agents**: There are two agents in the game, each represented by a colored square. The colors represent different players.
- **Food**: There is a single food item on the grid, represented by a colored circle. The color of the food indicates which agents is able to eat or pass the food.
- **Actions**: Each agent can perform different actions:
  - `0`: Move Up
  - `1`: Move Down
  - `2`: Move Left
  - `3`: Move Right
  - `4`: Eat (only available if the agent is on the food and the color matches)
  - `5`: Pass (only available if the agent is on the food and the color matches)
- **Rewards**: Each agent has an initial reward value. Rewards can be gained or lost based on the agent's actions:
  - `-0.1`: Deducted for each movement action
  - `+1`: Earned when an agent eats the food (only if the agent's color matches the food color)
- **Game Over**: The game ends if an agent's reward reaches 0 or below.

## Game Flow

1. **Initialization**:
   - The grid world is initialized with agents, food, and their respective colors.
   - Each agent starts with an initial reward value.
2. **Agent Actions**:
   - At each step, the agents select an action to perform.
   - Agents can move in any direction, eat the food (if they are on it and it matches their color), or pass (if they are on the food).
   - Rewards are adjusted based on the actions taken.
3. **Observation**:
   - The game state, including agent positions, food color and position, and rewards, is observed.
4. **Rendering**:
   - The game state is visually rendered using a graphical interface.
   - Agents are displayed as colored squares, and the food is displayed as a colored square or circle.
   - Rewards of each agent are displayed on the screen.
5. **Game End**:
   - If an agent's reward reaches 0 or below, the game ends.
   - The episode duration is also limited to a maximum number of steps.
6. **Reset**:
   - The game is reset, and a new episode begins with a random initial state.

## Testing the Game

To ensure the correctness of the game logic, a set of unit tests is provided. The tests cover various aspects of the game, such as resetting the game, taking actions, and checking the properties of the game environment.

## Dependencies

The game relies on the following libraries:
- `pygame` for rendering the game interface
- `gym` for defining the game environment
